/*
 * TTN Uplink: Temperature, Humidity, GPS Data, and Shock Detection
 * Potential Upgrades: 
      Change UTC to ETC
      GPS script optimizations

 */

#include <TinyGPSPlus.h>
#include <Adafruit_TinyUSB.h> // For Serial
#include <Wire.h>
#include <LIS3DHTR.h>
#include <SensirionI2CSht4x.h>
#include <LbmWm1110.hpp>
#include <Lbmx.hpp>

// Initialize modules
TinyGPSPlus gps;
LIS3DHTR<TwoWire> LIS; // I2C Accelerometer
SensirionI2CSht4x sht4x;  // SHT41 Temperature & Humidity Sensor

// Shock threshold in g
const float SHOCK_THRESHOLD = 2.0; 
uint16_t shockCounter = 0;

// LoRaWAN and network credentials
static LbmWm1110& lbmWm1110 = LbmWm1110::getInstance();
static constexpr smtc_modem_region_t REGION = SMTC_MODEM_REGION_US_915;
static const uint8_t DEV_EUI[8]  = { 0x2C, 0xF7, 0xF1, 0xF0, 0x54, 0x70, 0x00, 0x47 };
static const uint8_t JOIN_EUI[8] = { 0x36, 0xB8, 0x07, 0x24, 0x6E, 0xD4, 0x85, 0x85 };
static const uint8_t APP_KEY[16] = { 
    0xDF, 0x54, 0xC9, 0x75, 0x73, 0xC0, 0xE3, 0xB4, 
    0xBC, 0x2D, 0x25, 0x75, 0x71, 0x8B, 0xE9, 0x8A 
};

// Uplink scheduling parameters
static constexpr uint32_t FIRST_UPLINK_DELAY = 60;  // [sec.]
static constexpr uint32_t UPLINK_PERIOD = 30;       // [sec.]
static constexpr uint8_t UPLINK_FPORT = 3;

// Execution period for loop
static constexpr uint32_t EXECUTION_PERIOD = 50;    // [msec.]

enum class StateType { Startup, Joining, Joined, Failed };
StateType state = StateType::Startup;

// Custom event handlers for LoRaWAN modem events
class MyLbmxEventHandlers : public LbmxEventHandlers
{
protected:
    // Handle modem reset event
    void reset(const LbmxEvent& event) override {
        if (LbmxEngine::setRegion(REGION) != SMTC_MODEM_RC_OK) abort();
        if (LbmxEngine::setOTAA(DEV_EUI, JOIN_EUI, APP_KEY) != SMTC_MODEM_RC_OK) abort();

        Serial.println("Attempting to join the LoRaWAN network...");
        if (LbmxEngine::joinNetwork() != SMTC_MODEM_RC_OK) abort();

        state = StateType::Joining;
    }

    // Handle successful network join
    void joined(const LbmxEvent& event) override {
        state = StateType::Joined;
        Serial.println("Successfully joined the LoRaWAN network.");

        // Schedule the first uplink
        if (LbmxEngine::startAlarm(FIRST_UPLINK_DELAY) != SMTC_MODEM_RC_OK) {
            Serial.println("Failed to schedule the first uplink.");
            state = StateType::Failed;
        }
    }

    // Handle failed network join
    void joinFail(const LbmxEvent& event) override {
        state = StateType::Failed;
        Serial.println("Failed to join the LoRaWAN network.");
    }

    // Handle alarm event for scheduled uplinks
    void alarm(const LbmxEvent& event) override {
        if (state != StateType::Joined) return;

        // Read Temperature and Humidity
        float temperature, humidity;
        uint16_t error = sht4x.measureHighPrecision(temperature, humidity);
        if (error) {
            Serial.print("SHT41 sensor error: ");
            Serial.println(error);
            return;
        }

        // Read GPS Data
        float latitude = gps.location.isValid() ? gps.location.lat() : 0.0;
        float longitude = gps.location.isValid() ? gps.location.lng() : 0.0;

        // Read Accelerometer Data for Shock Detection
        float x = LIS.getAccelerationX();
        float y = LIS.getAccelerationY();
        float z = LIS.getAccelerationZ();
        if (abs(x) > SHOCK_THRESHOLD || abs(y) > SHOCK_THRESHOLD || abs(z) > SHOCK_THRESHOLD) {
            shockCounter++;
            Serial.println("Shock detected! Incrementing counter.");
        }

        // Get Satellites and Speed
        uint8_t satellites = gps.satellites.isValid() ? gps.satellites.value() : 0;  // Satellite count
        int16_t speedPayload = gps.speed.isValid() ? static_cast<int16_t>(gps.speed.kmph() * 100) : 0;  // Speed in km/h

        // Print sensor data locally
        Serial.println("=====================================");
        Serial.print("Temperature: ");
        Serial.print(temperature);
        Serial.println(" °C");

        Serial.print("Humidity: ");
        Serial.print(humidity);
        Serial.println(" %");

        Serial.print("Shock Counter: ");
        Serial.println(shockCounter);

        if (gps.date.isValid() && gps.time.isValid()) {
            Serial.print("Date: ");
            if (gps.date.day() < 10) Serial.print('0');
            Serial.print(gps.date.day());
            Serial.print("/");
            if (gps.date.month() < 10) Serial.print('0');
            Serial.print(gps.date.month());
            Serial.print("/");
            Serial.print(gps.date.year());
            Serial.print("  Time: ");
            if (gps.time.hour() < 10) Serial.print('0');
            Serial.print(gps.time.hour());
            Serial.print(":");
            if (gps.time.minute() < 10) Serial.print('0');
            Serial.print(gps.time.minute());
            Serial.print(":");
            if (gps.time.second() < 10) Serial.print('0');
            Serial.print(gps.time.second());
            Serial.println(" UTC");
        } else {
            Serial.println("Date/Time: INVALID");
        }

        if (gps.location.isValid()) {
            Serial.print("Latitude: ");
            Serial.print(latitude, 6);
            Serial.println("°");

            Serial.print("Longitude: ");
            Serial.print(longitude, 6);
            Serial.println("°");
        } else {
            Serial.println("Location: INVALID");
        }

        Serial.print("Satellites: ");
        Serial.println(satellites);

        Serial.print("Speed: ");
        Serial.print(speedPayload / 100.0);
        Serial.println(" km/h");
        Serial.println("=====================================");

        // Prepare LoRaWAN Payload
        uint8_t payload[17]; // 2 bytes temp, 2 bytes humidity, 2 bytes shock, 4 bytes lat, 4 bytes lng, 1 byte satellites, 2 bytes speed

        // Convert sensor readings to appropriate formats
        int16_t tempPayload = static_cast<int16_t>(temperature * 100); // Temperature in hundredths
        int16_t humidPayload = static_cast<int16_t>(humidity * 100);    // Humidity in hundredths
        uint16_t shockPayload = shockCounter;                           // Shock count
        int32_t lat = static_cast<int32_t>(latitude * 1000000);         // Latitude in microdegrees
        int32_t lng = static_cast<int32_t>(longitude * 1000000);        // Longitude in microdegrees

        // Assign bytes to payload (Big Endian)
        payload[0] = (tempPayload >> 8) & 0xFF;
        payload[1] = tempPayload & 0xFF;
        payload[2] = (humidPayload >> 8) & 0xFF;
        payload[3] = humidPayload & 0xFF;
        payload[4] = (shockPayload >> 8) & 0xFF;
        payload[5] = shockPayload & 0xFF;
        payload[6] = (lat >> 24) & 0xFF;
        payload[7] = (lat >> 16) & 0xFF;
        payload[8] = (lat >> 8) & 0xFF;
        payload[9] = lat & 0xFF;
        payload[10] = (lng >> 24) & 0xFF;
        payload[11] = (lng >> 16) & 0xFF;
        payload[12] = (lng >> 8) & 0xFF;
        payload[13] = lng & 0xFF;
        payload[14] = satellites;  // Satellite count
        payload[15] = (speedPayload >> 8) & 0xFF;
        payload[16] = speedPayload & 0xFF;

        // Send Payload via LoRaWAN
        if (LbmxEngine::requestUplink(UPLINK_FPORT, false, payload, sizeof(payload)) != SMTC_MODEM_RC_OK) {
            Serial.println("Failed to send uplink.");
        } else {
            Serial.println("Uplink sent successfully.");
            // Reset shock counter after successful uplink
            shockCounter = 0;
        }

        // Schedule the next uplink
        if (LbmxEngine::startAlarm(UPLINK_PERIOD) != SMTC_MODEM_RC_OK) {
            Serial.println("Failed to schedule the next uplink.");
            state = StateType::Failed;
        }
    }
};

MyLbmxEventHandlers handlers;  // Instantiate the custom event handler

void setup() 
{
    // Initialize Serial Monitor
    Serial.begin(115200);
    while (!Serial) delay(100); 
    Serial.println("Initializing Device...");

    // Initialize GPS Serial
    Serial1.begin(9600);  // GPS operates at 9600 baud
    Serial.println("GPS Serial Initialized.");

    // Initialize Temperature & Humidity Sensor
    sht4x.begin(Wire);  // No need to check return value
    Serial.println("SHT41 Sensor Initialized.");

    // Initialize Accelerometer
    LIS.begin(Wire, 0x19);  // No need to check return value
    Serial.println("LIS3DHTR Accelerometer Initialized.");

    // Initialize LoRaWAN Engine
    lbmWm1110.begin();
    LbmxEngine::begin(lbmWm1110.getRadio(), ModemEventHandler);
    Serial.println("LoRaWAN Engine Initialized.");
}

void loop() 
{
    // Continuously read GPS data
    while (Serial1.available() > 0) {
        char c = Serial1.read();
        gps.encode(c);
    }

    // Process LoRaWAN events
    LbmxEngine::doWork();

    // Short delay to prevent watchdog resets
    delay(EXECUTION_PERIOD);
}

void ModemEventHandler()
{
    static LbmxEvent event;
    while (event.fetch()) {
        handlers.invoke(event);  // Use the custom handlers instance
    }
}
