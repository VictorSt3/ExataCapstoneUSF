/*
 * TTN Uplink: Temperature, Humidity, GPS Data, and Shock Detection
 * Changes needed: 
      Longer delay for shocks so it doesn't register 1 shock as multiple
      Change UTC to ETC
      GPS script optimizations

 */

// Includes
#include <Arduino.h>
#include <Wire.h>
#include <SensirionI2CSht4x.h>
#include <LbmWm1110.hpp>
#include <Lbmx.hpp>
#include <TinyGPSPlus.h>
#include <Adafruit_TinyUSB.h> // For Serial
#include <LIS3DHTR.h>         // For accelerometer

#define WIRE Wire

// Constants

// Custom Region: USA
static constexpr smtc_modem_region_t REGION = SMTC_MODEM_REGION_US_915;

// Device-specific EUIs and Key
static const uint8_t DEV_EUI[8]  = { 0x2C, 0xF7, 0xF1, 0xF0, 0x54, 0x70, 0x00, 0x47 };
static const uint8_t JOIN_EUI[8] = { 0x36, 0xB8, 0x07, 0x24, 0x6E, 0xD4, 0x85, 0x85 };
static const uint8_t APP_KEY[16] = {
    0xDF, 0x54, 0xC9, 0x75, 0x73, 0xC0, 0xE3, 0xB4,
    0xBC, 0x2D, 0x25, 0x75, 0x71, 0x8B, 0xE9, 0x8A
};

static constexpr uint32_t FIRST_UPLINK_DELAY = 60;  // [sec.]
static constexpr uint32_t UPLINK_PERIOD = 30;       // [sec.]
static constexpr uint8_t UPLINK_FPORT = 3;

const float SHOCK_THRESHOLD = 2.0; // Shock threshold in g

LIS3DHTR<TwoWire> LIS; // IIC

// Variables

static LbmWm1110& lbmWm1110 = LbmWm1110::getInstance();

SensirionI2CSht4x sht4x;  // SHT41 sensor instance

// Initialize the TinyGPSPlus object
TinyGPSPlus gps;

unsigned long lastDisplayTime = 0;

// Shock counter
volatile uint32_t shockCounter = 0;

// Modem Event Handlers

class MyLbmxEventHandlers : public LbmxEventHandlers
{
protected:
    void reset(const LbmxEvent& event) override;
    void joined(const LbmxEvent& event) override;
    void joinFail(const LbmxEvent& event) override;
    void alarm(const LbmxEvent& event) override;
};

void MyLbmxEventHandlers::reset(const LbmxEvent& event)
{
    if (LbmxEngine::setRegion(REGION) != SMTC_MODEM_RC_OK) abort();
    if (LbmxEngine::setOTAA(DEV_EUI, JOIN_EUI, APP_KEY) != SMTC_MODEM_RC_OK) abort();

    Serial.println("Join the LoRaWAN network.");
    if (LbmxEngine::joinNetwork() != SMTC_MODEM_RC_OK) abort();
}

void MyLbmxEventHandlers::joined(const LbmxEvent& event)
{
    Serial.println("Start the alarm event.");
    if (LbmxEngine::startAlarm(FIRST_UPLINK_DELAY) != SMTC_MODEM_RC_OK) abort();
}

void MyLbmxEventHandlers::joinFail(const LbmxEvent& event)
{
    Serial.println("Failed to join the network.");
}

void MyLbmxEventHandlers::alarm(const LbmxEvent& event)
{
    Serial.println("Send the uplink message.");

    // Read temperature and humidity from the SHT41 sensor
    float temperature, humidity;
    uint16_t error = sht4x.measureHighPrecision(temperature, humidity);
    if (error)
    {
        Serial.print("Error reading from SHT41 sensor: ");
        Serial.println(error);
        return;
    }

    // Prepare the payload
    uint8_t payload[21]; // Adjust size accordingly

    // Encode temperature and humidity
    int16_t tempPayload = static_cast<int16_t>(temperature * 100);
    int16_t humidPayload = static_cast<int16_t>(humidity * 100);

    payload[0] = (tempPayload >> 8) & 0xFF;
    payload[1] = tempPayload & 0xFF;
    payload[2] = (humidPayload >> 8) & 0xFF;
    payload[3] = humidPayload & 0xFF;

    // Process GPS data
    if (gps.location.isValid())
    {
        // Latitude and longitude as double
        double latitude = gps.location.lat();
        double longitude = gps.location.lng();

        // Encode latitude and longitude as int32_t
        int32_t latPayload = static_cast<int32_t>(latitude * 1e6);
        int32_t lngPayload = static_cast<int32_t>(longitude * 1e6);

        payload[4] = (latPayload >> 24) & 0xFF;
        payload[5] = (latPayload >> 16) & 0xFF;
        payload[6] = (latPayload >> 8) & 0xFF;
        payload[7] = latPayload & 0xFF;

        payload[8] = (lngPayload >> 24) & 0xFF;
        payload[9] = (lngPayload >> 16) & 0xFF;
        payload[10] = (lngPayload >> 8) & 0xFF;
        payload[11] = lngPayload & 0xFF;

        // Speed in km/h
        double speed = gps.speed.isValid() ? gps.speed.kmph() : 0.0;

        // Altitude in meters
        double altitude = gps.altitude.isValid() ? gps.altitude.meters() : 0.0;

        // Number of satellites
        uint8_t satellites = gps.satellites.isValid() ? gps.satellites.value() : 0;

        // Encode speed as uint16_t in km/h * 100
        uint16_t speedPayload = static_cast<uint16_t>(speed * 100);

        payload[12] = (speedPayload >> 8) & 0xFF;
        payload[13] = speedPayload & 0xFF;

        // Encode altitude as int16_t in meters * 100
        int16_t altitudePayload = static_cast<int16_t>(altitude * 100);

        payload[14] = (altitudePayload >> 8) & 0xFF;
        payload[15] = altitudePayload & 0xFF;

        // Encode number of satellites as uint8_t
        payload[16] = satellites;
    }
    else
    {
        Serial.println("GPS location is invalid, not sending GPS data.");

        // Set GPS data to indicate invalid values
        memset(&payload[4], 0xFF, 13);  // Set bytes 4 to 16 to 0xFF
    }

    // Include the shock counter
    uint32_t counter = shockCounter; // Read the volatile variable
    payload[17] = (counter >> 24) & 0xFF;
    payload[18] = (counter >> 16) & 0xFF;
    payload[19] = (counter >> 8) & 0xFF;
    payload[20] = counter & 0xFF;

    // Send the payload via LoRaWAN
    if (LbmxEngine::requestUplink(UPLINK_FPORT, false, payload, sizeof(payload)) != SMTC_MODEM_RC_OK)
    {
        Serial.println("Failed to send uplink.");
        return;
    }

    // Schedule the next uplink
    if (LbmxEngine::startAlarm(UPLINK_PERIOD) != SMTC_MODEM_RC_OK)
    {
        Serial.println("Failed to schedule the next uplink.");
        return;
    }
}

// Modem Event Handler

static void ModemEventHandler()
{
    static LbmxEvent event;
    static MyLbmxEventHandlers handlers;

    while (event.fetch())
    {
        Serial.printf("----- %s -----\n", event.getEventString().c_str());

        handlers.invoke(event);
    }
}

// The interrupt callback function
void int1_callback()
{
    Serial.println("LIS3DHTR interrupt");

    uint8_t flag = 0;
    LIS.getIntStatus(&flag); // Get the interrupt status and clear it

    // 3 axis
    float x = LIS.getAccelerationX();
    float y = LIS.getAccelerationY();
    float z = LIS.getAccelerationZ();

    // Check if the shock exceeds the threshold on any axis
    if (abs(x) > SHOCK_THRESHOLD || abs(y) > SHOCK_THRESHOLD || abs(z) > SHOCK_THRESHOLD) {
        Serial.println("WARNING: A big shock was detected!");

        // Increment the shock counter
        shockCounter++;

        // Read and print temperature and humidity
        float temperature, humidity;
        uint16_t error = sht4x.measureHighPrecision(temperature, humidity);
        if (error)
        {
            Serial.print("Error reading from SHT41 sensor: ");
            Serial.println(error);
        }
        else
        {
            Serial.print("Temperature: ");
            Serial.print(temperature);
            Serial.print(" °C\t");
            Serial.print("Humidity: ");
            Serial.print(humidity);
            Serial.println(" %RH");
        }

        // Print GPS info
        displayInfo();
    } else {
        // Removed printing of x, y, and z accelerometer data
    }
}

void setup()
{
    delay(100); // Wait for power on grove

    // Initialize Serial
    Serial.begin(115200);
    while (!Serial) delay(100); // Wait for it to be ready

    // Initialize the GPS hardware serial port
    Serial1.begin(9600);  // GPS communicates at 9600 baud
    delay(1000);          // Delay to initialize

    Serial.println("GPS Hardware Serial initialized...");

    Wire.begin();
    sht4x.begin(Wire);  // Initialize the SHT41 sensor

    // Initialize the accelerometer
    LIS.begin(WIRE, 0x19); // I2C address
    if (!LIS)
    {
        Serial.println("LIS3DHTR didn't connect.");
        while (1);
    }

    // Configure LIS3DHTR to trigger an interrupt
    LIS.setInterrupt();

    // Initialize the interrupt pin
    pinMode(PIN_LIS3DHTR_INT2, INPUT);
    attachInterrupt(PIN_LIS3DHTR_INT2, int1_callback, ISR_DEFERRED | FALLING);

    lbmWm1110.begin();
    LbmxEngine::begin(lbmWm1110.getRadio(), ModemEventHandler);

    LbmxEngine::printVersions(lbmWm1110.getRadio());
}

void loop()
{
    // Read data from GPS module
    while (Serial1.available() > 0)
    {
        char c = Serial1.read();  // Read character from GPS

        // Feed the character to TinyGPSPlus for parsing
        gps.encode(c);
    }

    // Process modem tasks
    LbmxEngine::doWork();

    // Read acceleration data and check for shock
    if (!LIS) // LIS3DHTR is not ready
    {
        Serial.println("LIS3DHTR didn't connect.");
        while (1);
    }

    float x = LIS.getAccelerationX();
    float y = LIS.getAccelerationY();
    float z = LIS.getAccelerationZ();

    // Check if the shock exceeds the threshold on any axis
    if (abs(x) > SHOCK_THRESHOLD || abs(y) > SHOCK_THRESHOLD || abs(z) > SHOCK_THRESHOLD)
    {
        Serial.println("WARNING: A big shock was detected!");

        // Increment the shock counter
        shockCounter++;

        // Read and print temperature and humidity
        float temperature, humidity;
        uint16_t error = sht4x.measureHighPrecision(temperature, humidity);
        if (error)
        {
            Serial.print("Error reading from SHT41 sensor: ");
            Serial.println(error);
        }
        else
        {
            Serial.print("Temperature: ");
            Serial.print(temperature);
            Serial.print(" °C\t");
            Serial.print("Humidity: ");
            Serial.print(humidity);
            Serial.println(" %RH");
        }

        // Print GPS info
        displayInfo();
    }
    else
    {
        // Removed printing of x, y, and z accelerometer data
    }

    // FOPR DEBUGGING: Display GPS info and shock counter every 5 seconds
    if (millis() - lastDisplayTime > 5000)
    {
        lastDisplayTime = millis();
        displayInfo();
    }

    // Small delay to prevent watchdog resets, adjust as needed
    delay(500); 
}

// FOR DEBUGGING:Function to display GPS info and shock counter
void displayInfo()
{
    Serial.println("=====================================");

    // Print date and time data
    if (gps.date.isValid() && gps.time.isValid()) {
        Serial.print("Date: ");
        if (gps.date.day() < 10) Serial.print('0');
        Serial.print(gps.date.day());
        Serial.print("/");
        if (gps.date.month() < 10) Serial.print('0');
        Serial.print(gps.date.month());
        Serial.print("/");
        Serial.print(gps.date.year());

        Serial.print("  Time: ");
        if (gps.time.hour() < 10) Serial.print('0');
        Serial.print(gps.time.hour());
        Serial.print(":");
        if (gps.time.minute() < 10) Serial.print('0');
        Serial.print(gps.time.minute());
        Serial.print(":");
        if (gps.time.second() < 10) Serial.print('0');
        Serial.print(gps.time.second());
        Serial.println(" UTC");
    } else {
        Serial.println("Date/Time: INVALID");
    }

    // Print location data
    if (gps.location.isValid()) {
        Serial.print("Latitude: ");
        Serial.print(gps.location.lat(), 6);
        Serial.println("°");

        Serial.print("Longitude: ");
        Serial.print(gps.location.lng(), 6);
        Serial.println("°");
    } else {
        Serial.println("Location: INVALID");
    }

    // Print altitude if available
    if (gps.altitude.isValid()) {
        Serial.print("Altitude: ");
        Serial.print(gps.altitude.meters());
        Serial.println(" meters");
    } else {
        Serial.println("Altitude: INVALID");
    }

    // Print speed if available
    if (gps.speed.isValid()) {
        Serial.print("Speed: ");
        Serial.print(gps.speed.kmph());
        Serial.println(" km/h");
    } else {
        Serial.println("Speed: INVALID");
    }

    // Print number of satellites
    if (gps.satellites.isValid()) {
        Serial.print("Satellites: ");
        Serial.println(gps.satellites.value());
    } else {
        Serial.println("Satellites: INVALID");
    }

    // Print shock counter  
    Serial.print("Shock Counter: ");
    Serial.println(shockCounter);
}
