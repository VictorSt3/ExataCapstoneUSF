/*
 * TTN Temperature/Humidity Uplink: For Mini-1
 */

////////////////////////////////////////////////////////////////////////////////
// Includes

#include <Arduino.h>
#include <Wire.h>
#include <SensirionI2CSht4x.h>
#include <LbmWm1110.hpp>
#include <Lbmx.hpp>

////////////////////////////////////////////////////////////////////////////////
// Types

enum class StateType
{
    Startup,
    Joining,
    Joined,
    Failed,
};

////////////////////////////////////////////////////////////////////////////////
// Constants

// Custom Region: USA
static constexpr smtc_modem_region_t REGION = SMTC_MODEM_REGION_US_915;

// Device-specific EUIs and Key
static const uint8_t DEV_EUI[8]  = { 0x2C, 0xF7, 0xF1, 0xF0, 0x54, 0x70, 0x00, 0x47 };
static const uint8_t JOIN_EUI[8] = { 0x36, 0xB8, 0x07, 0x24, 0x6E, 0xD4, 0x85, 0x85 };
static const uint8_t APP_KEY[16] = {
    0xDF, 0x54, 0xC9, 0x75, 0x73, 0xC0, 0xE3, 0xB4,
    0xBC, 0x2D, 0x25, 0x75, 0x71, 0x8B, 0xE9, 0x8A
};

static constexpr uint32_t FIRST_UPLINK_DELAY = 60;  // [sec.]
static constexpr uint32_t UPLINK_PERIOD = 30;       // [sec.]
static constexpr uint8_t UPLINK_FPORT = 3;

static constexpr uint32_t EXECUTION_PERIOD = 50;    // [msec.]

////////////////////////////////////////////////////////////////////////////////
// Variables

static LbmWm1110& lbmWm1110 = LbmWm1110::getInstance();
static StateType state = StateType::Startup;

SensirionI2CSht4x sht4x;  // SHT41 sensor instance

////////////////////////////////////////////////////////////////////////////////
// MyLbmxEventHandlers

class MyLbmxEventHandlers : public LbmxEventHandlers
{
protected:
    void reset(const LbmxEvent& event) override;
    void joined(const LbmxEvent& event) override;
    void joinFail(const LbmxEvent& event) override;
    void alarm(const LbmxEvent& event) override;

};

void MyLbmxEventHandlers::reset(const LbmxEvent& event)
{
    if (LbmxEngine::setRegion(REGION) != SMTC_MODEM_RC_OK) abort();
    if (LbmxEngine::setOTAA(DEV_EUI, JOIN_EUI, APP_KEY) != SMTC_MODEM_RC_OK) abort();

    printf("Join the LoRaWAN network.\n");
    if (LbmxEngine::joinNetwork() != SMTC_MODEM_RC_OK) abort();

    state = StateType::Joining;
}

void MyLbmxEventHandlers::joined(const LbmxEvent& event)
{
    state = StateType::Joined;
    printf("Start the alarm event.\n");
    if (LbmxEngine::startAlarm(FIRST_UPLINK_DELAY) != SMTC_MODEM_RC_OK) abort();
}

void MyLbmxEventHandlers::joinFail(const LbmxEvent& event)
{
    state = StateType::Failed;
}

void MyLbmxEventHandlers::alarm(const LbmxEvent& event)
{
    printf("Send the uplink message.\n");

    // Read temperature and humidity from the SHT41 sensor
    float temperature, humidity;
    uint16_t error = sht4x.measureHighPrecision(temperature, humidity);
    if (error)
    {
        Serial.print("Error reading from SHT41 sensor: ");
        Serial.println(error);
        return;
    }

    // Prepare the payload
    uint8_t payload[4];
    int16_t tempPayload = static_cast<int16_t>(temperature * 100);  // Convert to integer
    int16_t humidPayload = static_cast<int16_t>(humidity * 100);    // Convert to integer

    payload[0] = (tempPayload >> 8) & 0xFF;
    payload[1] = tempPayload & 0xFF;
    payload[2] = (humidPayload >> 8) & 0xFF;
    payload[3] = humidPayload & 0xFF;

    // Send the payload via LoRaWAN
    if (LbmxEngine::requestUplink(UPLINK_FPORT, false, payload, sizeof(payload)) != SMTC_MODEM_RC_OK) {
        Serial.println("Failed to send uplink.");
        return;
    }

    // Schedule the next uplink
    if (LbmxEngine::startAlarm(UPLINK_PERIOD) != SMTC_MODEM_RC_OK) {
        Serial.println("Failed to schedule the next uplink.");
        return;
    }
}

////////////////////////////////////////////////////////////////////////////////
// ModemEventHandler

static void ModemEventHandler()
{
    static LbmxEvent event;
    static MyLbmxEventHandlers handlers;

    while (event.fetch())
    {
        printf("----- %s -----\n", event.getEventString().c_str());

        handlers.invoke(event);
    }
}

////////////////////////////////////////////////////////////////////////////////
// setup and loop

void setup()
{
    delay(1000);
    printf("\n---------- STARTUP ----------\n");

    Wire.begin();
    sht4x.begin(Wire);  // Initialize the SHT41 sensor

    lbmWm1110.begin();
    LbmxEngine::begin(lbmWm1110.getRadio(), ModemEventHandler);

    LbmxEngine::printVersions(lbmWm1110.getRadio());
}

void loop()
{
    switch (state)
    {
    case StateType::Startup:
        ledOff(LED_BUILTIN);
        break;
    case StateType::Joining:
        if (millis() % 1000 < 200) ledOn(LED_BUILTIN); else ledOff(LED_BUILTIN);
        break;
    case StateType::Joined:
        ledOn(LED_BUILTIN);
        break;
    case StateType::Failed:
        if (millis() % 400 < 200) ledOn(LED_BUILTIN); else ledOff(LED_BUILTIN);
        break;
    }

    const uint32_t sleepTime = LbmxEngine::doWork();

    delay(min(sleepTime, EXECUTION_PERIOD));
}

////////////////////////////////////////////////////////////////////////////////
